#!/usr/bin/python

"""Calculate the closest neighbor to a given spot.

Takes two Excel XML files (generated by Bitplane Imaris) with results
from the spots detection, one file containing just a single spot, the
other file containing many spots. Calculates the spot from the second
file with the closest distance to the one from the first file.
"""

# TODO:
#  - create a class for handling Excel XML, move to separate package
#  - do sanity checking
#  - evaluate datatypes from XML cells

import argparse
import xml.etree.ElementTree as etree
import sys
import math
import numpy as np
from dist_tools import dist
import imaris_xml as ix

def main():
    argparser = argparse.ArgumentParser(description=__doc__)
    argparser.add_argument('-s', '--single', required=True, type=file,
        help='Excel XML file containing a single spot.')
    argparser.add_argument('-m', '--multi', required=True, type=file,
        help='Excel XML file containing multiple spots.')
    try:
        args = argparser.parse_args()
    except IOError as e:
        argparser.error(str(e))

    tree1 = ix.parse_xml(args.single)
    myns = ix.check_namesp(tree1, 'urn:schemas-microsoft-com:office:spreadsheet')

    tree2 = ix.parse_xml(args.multi)
    myns = ix.check_namesp(tree2, 'urn:schemas-microsoft-com:office:spreadsheet')

    # we're looking for stuff in the "Position" worksheet:
    ws1_pos = ix.get_worksheet(tree1, myns, 'Position')
    ws2_pos = ix.get_worksheet(tree2, myns, 'Position')

    cells1 = ix.parse_celldata(ws1_pos[0], myns)
    cells2 = ix.parse_celldata(ws2_pos[0], myns)

    # reference_spots are taken as the base to find the closest ones
    # in the set of cand_spots
    reference_spots = ix.IMS_extract_coords(cells1)
    cand_spots = ix.IMS_extract_coords(cells2)

    # test if calculation seems to be plausible:
    # cand_spots[len(cand_spots) - 1] = (59.84, 25.602, 1.161)

    for refid, refspot in enumerate(reference_spots):
        # create a numpy array for the distances to all spots in file1
        distances = np.empty(len(cand_spots))
        print
        print 'Calculating closest neighbour.'
        print 'Original spot:  [' + str(refid) + ']', refspot
        for idx, candspot in enumerate(cand_spots):
            distances[idx] = dist(refspot, candspot)
        nearest = distances.argmin()
        print "Neighbour spot: [" + str(nearest) + ']', cand_spots[nearest]
        print "Distance:", distances[nearest]
    return(0)

# see http://www.artima.com/weblogs/viewpost.jsp?thread=4829
# for this nice way to handle the sys.exit()/return() calls
if __name__ == "__main__":
    sys.exit(main())
